@startuml
class BookNotFoundException {
}
class HttpUtils {
+ {static} int OK_CODE
+ {static} int CREATED_CODE
+ {static} int NO_CONTENT_CODE
+ {static} int BAD_REQUEST
+ {static} int NOT_FOUND_RESOURCE
+ {static} int INTERNAL_SERVER_ERROR_CODE
+ {static} String CONTENT_TYPE
+ {static} String APPLICATION_JSON
+ {static} String TEXT_PLAIN
}

class Livre {
- String titre
- String[] auteurs
- String isbn
- String identifiant
- boolean estEmprunte
- {static} int DEFAULT_COMPTEUR
'~ {static} Logger logger'
+ {static} Livre createLivre(String,String)
+ String getTitre()
+ void setTitre(String)
+ String getIsbn()
+ void setIsbn(String)
+ String[] getAuteurs()
+ void setAuteurs(String)
+ boolean estEmprunte()
+ void setEstEmprunte(boolean)
+ String getIdentifiant()
+ boolean equals(Object)
+ int hashCode()
+ String toString()
}


interface StudentFinder {
~ List<T> findAll()
~ Optional<T> findByName(String)
~ Optional<T> findByNumber(int)
}

interface StudentManager {
~ void addStudent(String,int)
~ void removeStudent(int)
~ void updateStudent(int,String)
}

class GlobalExceptionHandler {
'~ {static} Logger logger'
+ {static} void handleException(HttpExchange,Exception)
+ {static} void handleException(HttpExchange,IllegalArgumentException)
+ {static} void handleException(HttpExchange,RuntimeException)
}


class Bibliotheque {
+ {static} int DUREE_MAX_EMPRUNT
'- Map<String,List<Livre>> livres'
'- Map<Livre,Emprunt> emprunts'
'- Map<String,Livre> livreById'
- void initLibrary()
+ void addLivre(Livre)
+ List<Livre> getLivres()
+ Optional<Livre> getLivreDisponibleByTitle(String)
+ List<Livre> getLivresByTitle(String)
+ boolean emprunte(Etudiant,Livre)
+ Emprunt getEmpruntByLivre(Livre)
+ boolean rend(Livre)
+ List<Emprunt> getEmprunts()
+ Livre getLivrebyId(String)
}

Bibliotheque *-->"1..* livres" Livre
Bibliotheque *-->"1..* emprunts" Emprunt

class MembersHttpHandler {
'- StudentRegistry studentRegistry'
'~ {static} Logger logger'
+ void handle(com.sun.net.httpserver.HttpExchange)
}
MembersHttpHandler -->"1\n studentRegistry" StudentRegistry


class LibraryHttpHandler {
'- Bibliotheque bibliotheque'
'- StudentRegistry studentRegistry'
'~ {static} Logger logger'
+ void handle(HttpExchange)
}
LibraryHttpHandler -->"1\n bibliotheque" Bibliotheque
LibraryHttpHandler -->"1\n studentRegistry" StudentRegistry


class LibraryHttpHandler$StudentDTO {
- int studentNumber
+ int studentNumber()
}


class SimpleHttpServer4Scolarity {
'- {static} Map<Integer,HttpServer> servers'
+ {static} int DEFAULT_PORT
'~ {static} java.util.logging.Logger logger'
+ {static} void main(String[])
+ {static} HttpServer startServer(int)
+ {static} HttpServer startServer(int,StudentRegistry)
+ {static} void stopServer(int)
}

SimpleHttpServer4Scolarity *-->"1\n servers" HttpServer

class SimpleHttpServer4Library {
- {static} Map<Integer,HttpServer> servers
'~ {static} Logger logger'
+ {static} int DEFAULT_PORT4LIBRARY
+ {static} int DEFAULT_PORT_4_SCOLARITY
+ {static} void main(String[])
+ {static} HttpServer startServer(int,Bibliotheque,StudentRegistry)
+ {static} void stopServer(int)
}
SimpleHttpServer4Library *-->"1\n servers" HttpServer

class JaxsonUtils {
+ {static} String toJson(Object)
+ {static} T fromJson(String,Class<T>)
}

class StudentRegistry {
'~ Map<Integer,Etudiant> students'
+ List<Etudiant> findAll()
+ Optional<Etudiant> findByName(String)
+ Optional<Etudiant> findByNumber(int)
+ void addStudent(String,int)
+ void removeStudent(int)
+ void updateStudent(int,String)
}

StudentRegistry *-->"1..* students" Etudiant


class StudentNotFoundException {
}
interface StudentInterface {
~ String getName()
~ int getStudentNumber()
~ void setName(String)
~ void setStudentNumber(int)
}

class Emprunt {
- LocalDate dateDeRetourMax
'- Livre livreEmprunte'
'- Etudiant emprunteur'
+ Livre getLivreEmprunte()
+ Etudiant getEmprunteur()
+ LocalDate getDateDeRetourMax()
+ boolean equals(Object)
+ int hashCode()
}

Emprunt *-->"1\n livreEmprunte" Livre
Emprunt *-->"1\n emprunteur" Etudiant


class Etudiant {
- String nom
- int noEtudiant
'- Collection<Emprunt> emprunts'
+ String getName()
+ void setName(String)
+ int getStudentNumber()
+ void setStudentNumber(int)
+ Collection<Emprunt> getEmprunts()
+ int getNombreDEmprunts()
+ void addEmprunt(Emprunt)
+ void removeEmprunt(Emprunt)
+ Emprunt getEmpruntFor(String)
+ String toString()
}

Etudiant *-->"1..* emprunts" Emprunt



Exception <|-- BookNotFoundException
HttpHandler <|.. MembersHttpHandler
HttpHandler <|.. LibraryHttpHandler
LibraryHttpHandler +.. LibraryHttpHandler$StudentDTO
StudentManager <|.. StudentRegistry
StudentFinder <|.. StudentRegistry
Exception <|-- StudentNotFoundException
StudentInterface <|.. Etudiant
@enduml